#define CATCH_CONFIG_MAIN
#include <random>
#include <algorithm>
#include <iterator>
#include <iostream>
#include <functional>
#include <vector>
#include "catch.hpp"
#include "hardware_simulator/compression.hpp"
//#include "test_baseline.hpp"
using namespace std;
//int main() {

TEST_CASE("Compress Test") {
    SECTION("write and read function test") {
        std::vector<std::vector<int>> a {
            {1,0, 0,0, 2,4, 1,7, 1,0, 0,0, 2,4, 1,7},
            {0,0, 0,0, 3,8, 0,0, 1,0, 3,0, 1,0, 2,0},
            {0,0, 0,0, 2,4, 1,7, 1,0, 0,0, 2,4, 1,7},
            {1,0, 3,7, 3,8, 0,0, 1,0, 3,0, 1,0, 2,0},
            {1,0, 0,0, 2,4, 1,7, 1,0, 0,0, 2,4, 1,7},
            {1,0, 0,0, 3,8, 0,0, 1,0, 3,0, 1,0, 2,0},
            {1,0, 0,0, 2,4, 1,7, 1,0, 0,0, 2,4, 1,7},
            {1,0, 0,0, 3,8, 0,0, 1,0, 3,0, 1,0, 2,0}
        };
        std::vector<std::vector<int>> a4_4 {
            {1,0, 0,0,  2,4, 1,7,   1,0, 0,0,   2,4, 1,7},
            {1,0, 3,7,  3,8, 0,0,   1,0, 3,0,   1,0, 2,0},
            {1,0, 0,0,  2,4, 1,7,   1,0, 0,0,   2,4, 1,7},
            {1,0, 0,0,  3,8, 0,0,   1,0, 3,0,   1,0, 2,0},

            {1,0, 0,0,  2,4, 1,7,   1,0, 0,0,   2,4, 1,7},
            {1,0, 0,0,  3,8, 0,0,   1,0, 3,0,   1,0, 2,0},
            {0,0, 0,0,  2,4, 1,7,   1,0, 0,0,   2,4, 1,7},
            {0,0, 0,0,  3,8, 0,0,   1,0, 3,0,   1,0, 2,0}
        };

        std::vector<std::vector<int>> a2_2 {
            {1,0, 3,7, 2,4, 1,7, 1,0, 3,0, 2,4, 1,7},
            {1,0, 0,0, 3,8, 1,7, 1,0, 3,0, 1,0, 2,0},
            {1,0, 0,0, 2,4, 1,7, 1,0, 3,0, 2,4, 1,7},
            {1,0, 0,0, 3,8, 1,7, 1,0, 3,0, 1,0, 2,0},
            {1,0, 0,0, 2,4, 0,0, 1,0, 0,0, 2,4, 1,7},
            {1,0, 0,0, 3,8, 0,0, 1,0, 0,0, 1,0, 2,0},
            {0,0, 0,0, 2,4, 0,0, 1,0, 0,0, 2,4, 1,7},
            {0,0, 0,0, 3,8, 0,0, 1,0, 0,0, 1,0, 2,0}
        };

        std::vector<std::vector<int>> b {
            {1,0, 0,0},
            {0,0, 2,3},
            {0,0, 1,0},
            {3,2, 0,0}
        };
        std::vector<std::vector<int>> res2 {
            {1,0, 2,3},
            {3,2, 1,0},
            {0,0, 0,0},
            {0,0, 0,0}
        };
       
        REQUIRE(compression(b, 16, 16, 2, 2) == res2);
        REQUIRE(compression(a, 16, 16, 2, 2) == a2_2);
        REQUIRE(compression(a, 16, 16, 4, 4) == a4_4);
    }

    SECTION("suit for crossbar") {
        std::vector<std::vector<int>> a2_2 {
            {1,0, 3,7, 2,4, 1,7, 1,0, 3,0, 2,4, 1,7},
            {1,0, 0,0, 3,8, 1,7, 1,0, 3,0, 1,0, 2,0},
            {1,0, 0,0, 2,4, 1,7, 1,0, 3,0, 2,4, 1,7},
            {1,0, 0,0, 3,8, 1,7, 1,0, 3,0, 1,0, 2,0},
            {1,0, 0,0, 2,4, 0,0, 1,0, 0,0, 2,4, 1,7},
            {1,0, 0,0, 3,8, 0,0, 1,0, 0,0, 1,0, 2,0},
            {0,0, 0,0, 2,4, 0,0, 1,0, 0,0, 2,4, 1,7},
            {0,0, 0,0, 3,8, 0,0, 1,0, 0,0, 1,0, 2,0}
        };

        std::vector<std::vector<std::vector<int>>> a2_2_4_2 {
            {
                {1,0, 3,7},
                {1,0, 0,0}
            },
            {
                {2,4, 1,7},
                {3,8, 1,7}
            },
            {
                {1,0, 3,0},
                {1,0, 3,0}
            },
            {
                {2,4, 1,7},
                {1,0, 2,0}
            },



            {
                {1,0, 0,0},
                {1,0, 0,0}
            },
            {
                {2,4, 1,7},
                {3,8, 1,7}
            },
            {
                {1,0, 3,0},
                {1,0, 3,0}
            },
            {
                {2,4, 1,7},
                {1,0, 2,0}
            },



            {
                {1,0, 0,0},
                {1,0, 0,0}
            },
            {
                {2,4, 0,0},
                {3,8, 0,0}
            },
            {
                {1,0, 0,0},
                {1,0, 0,0}
            },
            {
                {2,4, 1,7},
                {1,0, 2,0}
            },

            

            {
                {2,4, 0,0},
                {3,8, 0,0}
            },
            {
                {1,0, 0,0},
                {1,0, 0,0}
            },
            {
                {2,4, 1,7},
                {1,0, 2,0}
            }
        };
        REQUIRE(suit_crossbar(a2_2, 2, 4) == a2_2_4_2);
    }
}
//    return 0;
//}